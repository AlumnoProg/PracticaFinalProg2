unit Ej7;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Tipos, QueuesArray, StackArray, ListArray,
  Vcl.StdCtrls;

Const MaxCadena = 255;
      MaxCola = 2000;

type
  TForm1 = class(TForm)
    Memo1: TMemo;
    Button1: TButton;
    Edit1: TEdit;
    Edit2: TEdit;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    Button6: TButton;
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  P: Pila;
  C: Cola;
  L: Lista;
  QP, QC, QL: Integer;

implementation

{$R *.dfm}


//------------------------------------------------------------------------------
//DEFINIR COLA

Function ValidarLongitud(AValidar: String; Var Validado: Integer): Boolean;
Begin

  ValidarLongitud:= False;
  if(TryStrToInt(AValidar, Validado))and(1<=Validado)and(Validado<=MaxCola)then
    ValidarLongitud:= True;

End;

procedure TForm1.Button1Click(Sender: TObject);
var
  Longitud: Integer;
begin
  if(ValidarLongitud(Edit1.Text, Longitud))then begin
    if(C.MaxSizeQueue=MaxCola)then begin
      C.Crear(Cadena, Longitud);
      P.Crear(Cadena, Longitud);
    end else begin
      C.Crear(Cadena, Longitud+1);
      P.Crear(Cadena, Longitud);
    end;
    QP:= 0;
    QC:= 0;
    QL:= 0;
    Memo1.Lines.Add(' ');
    Memo1.Lines.Add(' -COLA Y PILA DEFINIDAS- ');
  end else begin
    Memo1.Lines.Add(' ');
    Memo1.Lines.Add(' -INGRESE VALORES PERMITIDOS- ');
    Memo1.Lines.Add(' ');
    Memo1.Lines.Add(' Ingrese valor entero entre 1 y '+MaxCola.ToString+'. ');
  end;
end;


//------------------------------------------------------------------------------
//CARGAR COLA

Function SinEspacios(S: String): Boolean;
Var Posicion: Integer;
Begin

  Posicion:= 1;
  SinEspacios:= False;
  while(Posicion<=Length(S))and(S[Posicion]<>' ')do
    Inc(Posicion);
  if(Posicion>Length(S))then SinEspacios:= True;

End;

Function ValidarEdit(Edit: String): Boolean;
begin

  ValidarEdit:= False;
  if(Edit<>'')and(SinEspacios(Edit)) and (1<=Length(Edit))and(Length(Edit)<=MaxCadena)then
    ValidarEdit:= True;

end;

Function CargarCola(Edit: String; Var C: Cola): Boolean;
var
  X: TipoElemento;
begin

  CargarCola:= False;
  if (ValidarEdit(Edit)) then begin
    X.Clave:= Edit;
    if (C.Encolar(X) = OK) then
      CargarCola:= True;
  end;


end;

procedure TForm1.Button2Click(Sender: TObject);
begin
  if (not C.EsLlena) then begin
    if (CargarCola(edit2.Text, C)) then begin
      Inc (QC);
      memo1.Lines.Add(edit2.Text + ' cargado en la cola');
    end else
      memo1.Lines.Add('Error, ingrese los datos correctamente');
  end else
    memo1.Lines.Add('Cola llena');
  edit2.Clear;
end;


//------------------------------------------------------------------------------
//CARGAR PILA

Function CargarPila(Edit: String; Var P: Pila): Boolean;
var
  X: TipoElemento;
begin

  CargarPila:= False;
  if (ValidarEdit(Edit)) then begin
    X.Clave:= Edit;
    if (P.Apilar(X) = OK) then
      CargarPila:= True;
  end;

end;

procedure TForm1.Button3Click(Sender: TObject);
begin
  if (not P.EsLlena) then begin
    if (CargarPila(edit2.Text, P)) then begin
      Inc(QP);
      memo1.Lines.Add(edit2.Text + ' cargado en la pila');
    end else
      memo1.Lines.Add('Error, ingrese los datos correctamente');
  end else
    memo1.Lines.Add('Pila llena');
  edit2.Clear;
end;


//------------------------------------------------------------------------------
//MOSTRAR

Procedure MostrarLista (var L: Lista ; Memo: Tmemo);
var
  X: TipoElemento;
  Q: PosicionLista;
  DatoS, DatoN: String;
begin
Q:= L.Comienzo;
Memo.Lines.Add(' ');
Memo.Lines.Add(' || '+'LISTA :'+' ||');
Memo.Lines.Add(' ');
  while Q<> NULO do
    begin
      X:= L.Recuperar(Q);
      DatoN:= X.Clave;
      DatoS:=X.Valor1;
      Memo.Lines.Add(' Dato : '+ Vartostr(X.Clave)+' | Pos : '+ Vartostr(X.Valor1) + ';');
      Q:= L.Siguiente(Q);
    end;

end;


Procedure MostrarCola(Cartel: String; Var C: Cola; Memo1: TMemo);
Var TeC: TipoElemento;
    CAux: Cola;
    Posicion: Integer;
Begin

  Posicion:= 1;
  Memo1.Lines.Add(' ');
  Memo1.Lines.Add(' || '+Cartel+' ||');
  if(Not C.EsVacia)then begin
    CAux.Crear(C.DatoDeLaClave, C.SizeQueue);
    Memo1.Lines.Add(' ');
    while(Not C.EsVacia)do begin
      TeC:= C.Recuperar;
      Memo1.Lines.Add(' Posicion : '+Posicion.ToString+' | Elemento : '+VarToStr(TeC.Clave));
      CAux.Encolar(TeC);
      C.DesEncolar;
      Inc(Posicion);
    end;
    C.InterCambiar(CAux, False);
  end else begin
    Memo1.Lines.Add(' ');
    Memo1.Lines.Add(' -COLA VACIA-');
  end;

End;

Procedure MostrarPila(Cartel: String; Var P: Pila; Memo1: TMemo);
Var TeP: TipoElemento;
    PAux: Pila;
    Posicion: Integer;
Begin

  Posicion:= 1;
  Memo1.Lines.Add(' ');
  Memo1.Lines.Add(' || '+Cartel+' ||');
  if(Not P.EsVacia)then begin
    PAux.Crear(P.DatoDeLaClave, P.SizeStack);
    Memo1.Lines.Add(' ');
    while(Not P.EsVacia)do begin
      TeP:= P.Recuperar;
      Memo1.Lines.Add(' Pos : '+Inttostr (Posicion)+' | Dato : '+VarToStr(TeP.Clave));
      PAux.Apilar(TeP);
      P.DesApilar;
      Inc(Posicion);
    end;
    P.InterCambiar(PAux, False);
  end else begin
    Memo1.Lines.Add(' ');
    Memo1.Lines.Add(' -PILA VACIA-');
  end;

End;

procedure TForm1.Button4Click(Sender: TObject);
begin
  memo1.Lines.Add(' ');
  MostrarCola('Cola: ', C, memo1);
  memo1.Lines.Add(' ');
  MostrarPila('Pila: ', P, memo1);
end;

procedure TForm1.Button5Click(Sender: TObject);
begin
  memo1.Clear;
end;


//------------------------------------------------------------------------------
//VALORES COMUNES

Procedure Comunes(Var L: Lista);
var
  X1, X2: TipoElemento;
  PAux: Pila;
  CAux: Cola;
  S: String;
  i: Integer;
begin
  CAux.Crear(C.DatoDeLaClave, C.SizeQueue);
  PAux.Crear(P.DatoDeLaClave, P.SizeStack);
  i:= 1;
  while (not P.EsVacia) do begin

  end;
  P.InterCambiar(PAux, True);
end;

procedure TForm1.Button6Click(Sender: TObject);
begin
  if (not C.EsVacia) and (not P.EsVacia) then begin
    L.Crear(P.DatoDeLaClave, P.SizeStack);
    Comunes(L);
    if (not L.EsVacia) then begin
      memo1.Lines.Add(' ');
      memo1.Lines.Add('Coincidencias: ');
      MostrarLista(L, memo1);
      memo1.Lines.Add(' ');
    end else
      memo1.Lines.Add('No se encontraron coincidencias');
  end else
    memo1.Lines.Add('Pila o Cola vacía');
end;

end.
