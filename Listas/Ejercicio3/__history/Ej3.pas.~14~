unit Ej3;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Tipos, ListArray, Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Edit1: TEdit;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Edit2: TEdit;
    Edit3: TEdit;
    Button5: TButton;
    Button1: TButton;
    Button6: TButton;
    Memo1: TMemo;
    Button8: TButton;
    Edit4: TEdit;
    Button9: TButton;
    Edit5: TEdit;
    Button10: TButton;
    Button11: TButton;
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  L1, L2, LAux: Lista;

implementation

{$R *.dfm}

//------------------------------------------------------------------------------
//CREAR LISTA

Function ValidarTamanio(Tamanio: String):Boolean;
var
  i:integer;
begin
  if (not(TryStrToInt(Tamanio, i))) or (i < 1) or (i > 2000) then
    ValidarTamanio:= False
  else
    ValidarTamanio:= True;
end;


procedure TForm1.Button2Click(Sender: TObject);
var
  Tamanio: String;
begin
  Tamanio:= edit1.Text;
  if (ValidarTamanio(Tamanio)) then begin
    L1.Crear(Numero, StrToInt(Tamanio));
    L2.Crear(Numero, StrToInt(Tamanio));
    LAux.Crear(Numero, StrToInt(Tamanio));
    memo1.Lines.Add('Listas creadas con éxito');
  end else
    memo1.Lines.Add('Error, ingrese un numero entero entre 1 y 2000');
end;


//------------------------------------------------------------------------------
//CARGAR LISTA 1

Function ValidarEdit(Edit: String):Boolean;
var
  i: integer;
begin

  if (not(TryStrToInt(Edit, i))) then
    ValidarEdit:= False
  else
    ValidarEdit:= True;

end;

procedure TForm1.Button3Click(Sender: TObject);
var
  X: TipoElemento;
  Numero: String;
begin
  Numero:= edit2.Text;
  if (L1.EsLLena = False) then begin
    if (ValidarEdit(Numero)) then begin
      X.Clave:= StrToInt(Numero);
      L1.Agregar(X);
      LAux.Agregar(X);
      memo1.Lines.Add(Numero + ' cargado con éxito en la lista 1');
      edit2.Clear;
    end else
      memo1.Lines.Add('Error, ingrese un numero entero');
  end else
    memo1.Lines.Add('Lista 1 llena');
end;


//------------------------------------------------------------------------------
//CARGAR LISTA 2

procedure TForm1.Button4Click(Sender: TObject);
var
  X: TipoElemento;
  Numero: String;
begin
  Numero:= edit3.Text;
  if (L2.EsLLena = False) then begin
    if (ValidarEdit(Numero)) then begin
      X.Clave:= StrToInt(Numero);
      L2.Agregar(X);
      memo1.Lines.Add(Numero + ' cargado con éxito en la lista 2');
      edit3.Clear;
    end else
      memo1.Lines.Add('Error, ingrese un numero entero');
  end else
    memo1.Lines.Add('Lista 2 llena');
end;


//------------------------------------------------------------------------------
//MOSTRAR LISTAS

procedure TForm1.Button5Click(Sender: TObject);
begin
  if L1.EsVacia=False then begin
   memo1.Lines.add('--------------------------');
   memo1.Lines.add('Lista 1:');
   memo1.Lines.add(L1.RetornarClaves);
   memo1.Lines.Add('---------------------------');
  end
  else begin
    memo1.Lines.Add('---------------------------');
    memo1.Lines.add('La lista 1 está vacia.');
  end;

  if L2.EsVacia=false then begin
    memo1.Lines.add('---------------------------');
    memo1.Lines.add('Lista 2:');
    memo1.Lines.add(L2.RetornarClaves);
    memo1.Lines.add('---------------------------');
  end
  else  begin
    memo1.Lines.Add('---------------------------');
    memo1.Lines.add('La lista 2 está vacia.');
  end;
end;


//------------------------------------------------------------------------------
//Es divisible

Function VerificarTamanio(): Boolean;
var
  Cant1, Cant2: integer;
  P1, P2: PosicionLista;
begin

  Cant1:= 0;
  Cant2:= 0;
  P1:= L1.Comienzo;
  while (P1 <> NULO) do begin
    Inc(Cant1);
    P1:= L1.Siguiente(P1);
  end;
  P2:= L2.Comienzo;
  while (P2 <> NULO) do begin
    Inc(Cant2);
    P2:= L2.Siguiente(P2);
  end;
  if (Cant1 = Cant2) then
    VerificarTamanio:= True
  else
    VerificarTamanio:= False;

end;

Function VerificarCeros(): Boolean;
var
  Flag: Boolean;
  P1: PosicionLista;
  X: TipoElemento;
begin

  Flag:= True;
  P1:= L1.Comienzo;
  while (P1 <> NULO) and (Flag = True) do begin
    X:= L1.Recuperar(P1);
    if (X.Clave = 0) then
      Flag:= False;
    P1:= L1.Siguiente(P1);
  end;
  VerificarCeros:= Flag;

end;

Function esDivisible(): Boolean;
var
  Flag: Boolean;
  X1, X2: TipoElemento;
  P1, P2: PosicionLista;
begin
  Flag:= True;
  P1:= L1.Comienzo;
  P2:= L2.Comienzo;
  while (P1 <> NULO) and (Flag) do begin
    X1:= L1.Recuperar(P1);
    X2:= L2.Recuperar(P2);
    if ((X2.Clave mod X1.Clave) <> 0) then begin
      Flag:= False;
    end;
    P1:= L1.Siguiente(P1);
    P2:= L2.Siguiente(P2);
  end;
  Result:= Flag;
end;

procedure TForm1.Button1Click(Sender: TObject);
begin

  if (L1.EsVacia = False) and (L2.EsVacia = False) then begin
    if (VerificarTamanio) then begin
      if (VerificarCeros) then begin
        if (esDivisible()) then
          memo1.Lines.Add('La lista 2 es divisible por la lista 1')
        else
          memo1.Lines.Add('La lista 2 no es divisible por la lista 1');
      end else
        memo1.Lines.Add('Error, la lista 1 contiene ceros, y no es posible dividir por 0');
    end else
      memo1.Lines.Add('Error, la cantidad de datos en ambas listas es distinto');
  end else begin
      if (L1.EsVacia=true)and (L2.EsVacia=true) then begin
        memo1.Lines.Add('Ambas listas están vacías.')
      end else
        if L1.EsVacia=true then
          memo1.Lines.Add('Error, Lista 1 Vacía.')
        else
          if L2.EsVacia=true then
            memo1.Lines.Add('Error, Lista 2 Vacía.');
  end;

end;

end.
